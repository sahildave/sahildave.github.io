<?xml version="1.0" encoding="utf-8"?>






































































































































<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sahil Dave</title>
  <subtitle>Sahil Dave's Portfolio</subtitle>
  <updated>2019-05-21T17:54:44+02:00</updated>
  <id>https://www.sahildave.com/</id>
  <generator uri="https://sparanoid.com/lab/amsf/" version="1.1.11">Almace Scaffolding</generator>

  <link rel="alternate" type="text/html" hreflang="en" href="https://www.sahildave.com/" />
  <link rel="self" type="application/atom+xml" href="https://www.sahildave.com/feed.xml" />

  <author>
    <name>Sahil Dave</name>
    <uri>https://www.sahildave.com/</uri>
    <email>sahildave1991@gmail.com</email>
  </author>

  
    
      

      

      <entry>
        <title>Google Translate &amp;#8208; Ch. 1</title>
        <id>https://www.sahildave.com/blog/google-translate-ch-1/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/blog/google-translate-ch-1/" />
        <published>2019-01-22T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;As a designer, I believe side projects are of utmost importance. You get to experiment with various scenarios working on a new topic and it dramatically enhances your skill. On the other hand, I also believe that designers are pretty protective about their work. We take immense shame in accepting if we fail at improving a product through design. But as they say, failing and failure are different things.&lt;/p&gt;

&lt;p&gt;While trying to improve Google Translate’s functional design, Indhuja and I faced a lot of roadblocks. Naturally, these were expected. Firstly, this was a side project and we had no data about the usage of any particular feature. Secondly, our aim was also to keep the Information Architecture unchanged. But given the givens, we still think we are succeeding, through one learning at a time. We understood what a wonderful product Google Translate is, at its core. And this astonishing learning gave us immense respect for the product team at Google Translate who might be facing these issues on a daily basis.&lt;/p&gt;

&lt;h2 id=&quot;inception&quot;&gt;Inception&lt;/h2&gt;

&lt;p&gt;The idea came into being when we were looking for a new product to work upon in January. We always try to improve the functional aspect of an app with our redesigns and not just the UI.&lt;/p&gt;

&lt;p&gt;We moved to the wunderbar city of Berlin a few months ago and Translate has been a saviour. A tweet from Alex Münch caught Indhuja’s eye and it all fell into place. We thought Google translate would be an interesting project to be occupied with. There are googol (pun intended) number of “redesigns” on dribbble which don’t really serve any purpose, and we hate it. We started with trying to solve one problem this time - Reachability.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-wechanged&quot;&gt;What we changed&lt;/h2&gt;

&lt;p&gt;Nobody can deny that the technology behind Translate is unparallel but there are some UX issues which we intended to solve. We wanted to keep things at a quick reach. Whenever the user is at home or at a grocery shop they’d want the most used actions, Type and Camera, nearby. So naturally, we thought of putting them all near the thumb.&lt;/p&gt;

&lt;h3 id=&quot;reach&quot;&gt;Reach&lt;/h3&gt;

&lt;p&gt;With the home screen, we aimed to keep things near the thumb without changing the Information Architecture of the page. On one hand, we dropped the icon labels for the Camera and Mic. On the other, we added more information to the Conversation and Handwriting actions. The assumption here was that the user would be familiar with buttons like Camera and Mic. And as the Conversation and Handwriting felt focussed more towards power users, they should have more information attached.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/translate-ch-1/home.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;the-user-can-now-quickly-access-the-camera-and-mic-the-cards-for-conversation-and-handwriting-provide-more-context&quot;&gt;The user can now quickly access the Camera and Mic. The cards for Conversation and Handwriting provide more context.&lt;/h6&gt;

&lt;h3 id=&quot;guide-withcolour&quot;&gt;Guide with Colour&lt;/h3&gt;

&lt;p&gt;Taking inspiration from Google Tasks and Assistant for the Material Design 2.0 UI, we went with an all white and blue approach. We wanted the main action of a state to be highlighted with the blue colour. As the primary need for the user while using the app was to view the translated text we tried to keep the translated text in-blue or on-blue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/translate-ch-1/home-typing-result.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;colours-are-used-to-guide-the-users-attention-at-different-stages-of-the-product&quot;&gt;Colours are used to guide the user’s attention at different stages of the product&lt;/h6&gt;

&lt;p&gt;In the home state, the language switcher was on-blue. While typing, the real-time translation is in-blue. And finally, in the result screen, the translation is on-blue. This not only brings vibrance in the UI but also directs the user’s eye to the highlighted part of the screen.&lt;/p&gt;

&lt;p&gt;This notion was shattered when we read the article by &lt;a href=&quot;https://medium.com/@pendar&quot;&gt;Pendar Yousefi&lt;/a&gt; published while we were doing this project though.&lt;/p&gt;

&lt;h3 id=&quot;making-itseamless&quot;&gt;Making it seamless&lt;/h3&gt;

&lt;p&gt;There was a need for a smoother experience. Currently, the input boxes ‘jump’ up and down a lot between the three home-typing-result states. We aimed at cleaning that up by keeping components stacked from the bottom. This should also help in keeping a minimal number of screens as the transitions can be smooth when the keyboard pops up.
Now the problems started cropping up.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;h3 id=&quot;recents--suggestions&quot;&gt;Recents &amp;amp; Suggestions&lt;/h3&gt;

&lt;p&gt;Generally speaking, showing a “Recents” list is easier if the list has an infinite space below it. The natural behaviour for the user is to scroll that list and view his history in a descending fashion.&lt;/p&gt;

&lt;p&gt;But, we had the input box at the bottom! So the list couldn’t be infinite. Next, keeping the height of short phones like iPhone 5/SE in mind, there was enough space for only maximum 3 items above the input boxes. So, in the end, we had only this tiny vertical space for all the things - recent, suggestions, “Did you mean” and “Translate from”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/translate-ch-1/sugg-did-from.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;quick-suggestions-did-you-mean-and-translate-fromall-come-in-the-same-location&quot;&gt;Quick-Suggestions, Did you mean and Translate from — all come in the same location&lt;/h6&gt;

&lt;h3 id=&quot;language-switcher&quot;&gt;Language Switcher&lt;/h3&gt;

&lt;p&gt;We experimented with placing the language switcher component to many different locations on the screen and somehow gain some more vertical space. This was going contrary to our aim of keeping a minimum number of screens. Changing the language switcher to a small vertical switch on the left helped us gain some vertical space and it inadvertently aligned all the text elements as well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/translate-ch-1/switcher.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;few-of-the-many-iterations-of-the-language-switcher&quot;&gt;Few of the many iterations of the language switcher&lt;/h6&gt;

&lt;h3 id=&quot;result-screen&quot;&gt;Result Screen&lt;/h3&gt;

&lt;p&gt;This was the straw that broke the camel’s back. We morphed the “typing” state into the result screen for a smooth experience. Here the result is on top, highlighted on-blue, and more information is down under the keyboard. It looked good in its own domain but was very different from the home screen. The user could only click the cross icon to go back home.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/translate-ch-1/result.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;comparison-of-the-result-screens-results-are-shown-on-top-of-the-screen&quot;&gt;Comparison of the result screens. Results are shown on top of the screen.&lt;/h6&gt;

&lt;p&gt;We can certainly make smooth Flinto prototypes and it will look awesome. But then if you compare this with the current app, you’d say that the simplicity was lost.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/translate-ch-1/flow.gif&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;a-quick-flinto-of-the-4-major-states&quot;&gt;A quick Flinto of the 4 major states.&lt;/h6&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;

&lt;p&gt;On the first glance of the current app, a redesign looked simple. But we couldn’t be more wrong. We just scratched the surface. There was a certain complexity in the simplicity and we missed it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There was a certain complexity in the simplicity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This astonishing reveal is the reason we are now learning more about the product - like the intricacies of the user flows and the original aim of the service as envisioned by Google- “Speak to the World”.
We started only with reachability in mind but now we see the product as a whole from a more zoomed out view. And while seeing a product from up there, you tend to notice a few more things from a design standpoint. That’s why you need to raise your head above the water once in a while rather than being drowned in it, all day.&lt;/p&gt;

&lt;p&gt;We needed the fail to see things clearly. Now, instead of redesigning Google Translate, we have decided to work on the product as a whole.
We’d be writing more about this endeavour as we progress. Stay tuned!&lt;/p&gt;

&lt;h3 id=&quot;interesting-links&quot;&gt;Interesting links:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-design/a-fish-in-your-ear-134deed70268&quot;&gt;Designing the UI of Google Translate - Google Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/google-design/3-ux-takeaways-from-redesigning-google-translate-3184038f43bf&quot;&gt;3 UX takeaways from redesigning Google Translate - Google Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://material.io/design/components/&quot;&gt;Material Design 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/translate-ch-1/credits.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;co-written-with-indhuja&quot;&gt;Co-written with Indhuja.&lt;/h6&gt;

&lt;p&gt;This post was originally seen &lt;a href=&quot;https://uxdesign.cc/how-we-succeeded-by-failing-to-redesign-google-translate-e9177e0e146e&quot;&gt;here&lt;/a&gt; on Medium.&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>As a designer, I believe side projects are of utmost importance. You get to experiment with various scenarios working on a new topic and it dramatically enhances your skill. On the other hand, I also believe that designers are pretty protective about their work. We take immense shame in accepting if we fail at improving a product through design. But as they say, failing and failure are different things.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Volt Sports</title>
        <id>https://www.sahildave.com/work/Volt-Social-Sports/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/work/Volt-Social-Sports/" />
        <published>2018-03-11T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;Volt aims at teaming up people, sports and people who love sports. With Volt, you can host or join a match, book an arena for your team or compete in a tournament. All in one place!&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;p&gt;&lt;a href=&quot;https://www.behance.net/gallery/63067091/Volt-Sports-A-Social-Sports-App-Concept&quot; target=&quot;_blank&quot;&gt;This was originally posted on behance.net&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://dribbble.com/sahildave/projects/663391-Volt-Sports&quot; target=&quot;_blank&quot;&gt;Available as project on Dribbble&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/volt/1.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/volt/2.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/volt/3.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/volt/4.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/volt/5.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/volt/6.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/volt/7.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/volt/8.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Volt aims at teaming up people, sports and people who love sports. With Volt, you can host or join a match, book an arena for your team or compete in a tournament. All in one place!</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Ostrich Books</title>
        <id>https://www.sahildave.com/work/Case-Study-Ostrich/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/work/Case-Study-Ostrich/" />
        <published>2018-03-03T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;Ostrich Books was started to solve problems with book availability and the high cost. Books are either not available in the local store or are costly if ordered online. Getting suggestion online is even worse. If you are an avid reader, you’d not like the Amazon and Goodreads recommendation system. If you are an avid reader, you’d have a really bad time online.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/app-showcase.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;There are only a few good bookstores in Bangalore and even lesser number of libraries. And after making an astronomical number of calls to a bookstore and confirming they have the book, you chicken out because of the worsening Bangalore traffic. One of the biggest store in Bangalore would have almost all of the book and frankly it was a major point of purchase for Ostrich too; but the quality is not that great.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/amazon.jpeg&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;the-pop-culture-and-increasing-number-of-book-to-movie-adaptation-have-skewed-the-bestselling-lists-in-amazon-india-and-goodreads&quot;&gt;The pop culture and increasing number of book-to-movie adaptation have skewed the bestselling lists in Amazon India and Goodreads.&lt;/h6&gt;

&lt;blockquote&gt;
  &lt;p&gt;A woman walking on the pavement overtook my car eight times and my car overtook her eight times. Two more times and we would have been engaged.&lt;/p&gt;
  &lt;footer&gt;
    &lt;cite&gt;&lt;a href=&quot;https://www.deccanherald.com/content/582631/jeffrey-archer-amused-blurus-infamous.html&quot;&gt;Jeffrey Archer on Bangalore traffic&lt;/a&gt;&lt;/cite&gt;
  &lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/blr-traffic-library.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;left-blossom-book-store-right-bangalores-daily-traffic&quot;&gt;(Left) Blossom book store. (Right) Bangalore’s daily traffic.”&lt;/h6&gt;

&lt;h2 id=&quot;the-process&quot;&gt;The Process&lt;/h2&gt;

&lt;p&gt;Being the designer &amp;amp; engineer co-founder of the team, I had all the non-business responsibilities. We needed a customer facing app and a working admin dashboard, and all of it in just 2 months. Prior to Ostrich, I had done that multiple times but this time the catch was that those products were from an established company. Creating new product(s) for a new company is different. You conceptualize the logo, branding, present it, argue about it and go back to the drawing board. Developing an app comes after that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/git-trello.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;my-gantt-charts-were-off-the-charts&quot;&gt;My Gantt charts were off the charts.&lt;/h6&gt;

&lt;p&gt;Being the solo developer, I built the Android app, laid down the foundation for the backend, created serverless modules, created admin panels and many other side projects. I also lead the product marketing and community engagement. As the internet was undergoing an incredible transformation in India and the number of Android users was increasing by the day, I chose to go with Google’s Material Design. It was 2015 and users were getting comfortable with this new design system.&lt;/p&gt;

&lt;p&gt;Next, I chose not to go with some fancy animations as phones in India are pretty slow. In one of my user interview, I saw a user open the &lt;i&gt;Book Detail&lt;/i&gt; page with an extreme stutter because of the element transition animation from the bottom. I decided to scrap that animation and went with the simple translation like a bottom sheet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/rapid-proto.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;rapid-prototyping-was-done-not-with-after-effects-but-directly-in-the-code-there-was-very-little-time-to-create-a-design-prototype-and-then-implementing-it&quot;&gt;Rapid prototyping was done; not with After Effects but directly in the code. There was very little time to create a design prototype and then implementing it.&lt;/h6&gt;

&lt;p&gt;Another result of rapid prototyping was that our internal processes were also made rapid. We would do the &lt;b&gt;User Research&lt;/b&gt; while delivering the book. We would ask them about their experience with the app. If they were a returning user, we would have a list of old conversations and interview them about the latest changes that they see.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/notif.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;notifications-played-an-important-role-i-made-a-gcm-module-where-in-you-could-send-a-trending-facebook-post-and-it-would-be-shown-to-interested-users-on-the-fly&quot;&gt;Notifications played an important role. I made a GCM module where in you could send a trending Facebook post and it would be shown to interested users, on the fly.&lt;/h6&gt;

&lt;h2 id=&quot;the-product&quot;&gt;The Product&lt;/h2&gt;
&lt;p&gt;Ostrich was launched. To promote reading and making it easy was our main objective.
You search for a book and start reading a physical copy in a matter of hours.
You can lend your own books and get 3 in return.
You could rent a full book set or buy it at a discounted price.
Meet an author or chat with fellow readers at specially organised event.
&lt;strong&gt;Experience books not just the story.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the end, after an app update was released, we’d have learned a lot from the process and implement the design changes in our social media posts as well. I think I won’t be wrong saying that iterating UI design helped us in improving our social media content too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/logo.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;the-name-and-the-logo-for-ostrich-defined-progress-a-fast-one-ostrich-being-the-fastest-land-bird-with-a-long-neck-denoted-the-pace-and-the-reach-we-wanted-to-have-respectively&quot;&gt;The name and the logo for Ostrich defined progress, a fast one. Ostrich being the fastest land bird with a long neck denoted the pace and the reach we wanted to have, respectively.&lt;/h6&gt;

&lt;p&gt;The colors were soothing; primary teal and complimentary amber. Colors and fonts were taken from &lt;b&gt;Material Design&lt;/b&gt; to adopt the Android ecosystem. The app should not look out of place in the user’s phone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/color-font.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;i-used-the-system-font-roboto-so-as-to-keep-the-app-size-minimum-under-4-mb&quot;&gt;I used the system font, Roboto, so as to keep the app size minimum, under 4 MB.&lt;/h6&gt;

&lt;p&gt;The users loved the simplicity of the app. You had only two diverging flows - you are either looking to borrow a book or lend it. When you were borrowing a book you were also given an option to borrow a specially packaged collection. Lending a book was easier. Either speak the book title, enter it or just scan the book’s barcode.&lt;/p&gt;

&lt;p&gt;I had designed the “Enter Book Title” card, with intricate detail in the animation choreography, to keep user’s attention to the same place.&lt;/p&gt;

&lt;p&gt;The “Profile page” component is now commonly known as “Bottom Sheet”, but was nowhere to be seen in 2015. I had always envisioned a UI where all the temporary pages like Settings, Profile etc float over the main UI. This doesn’t intrude the user’s normal flow.&lt;/p&gt;

&lt;p&gt;Another major component which became popular was the &lt;a href=&quot;https://github.com/sahildave/Search-View-Layout&quot;&gt;Search View Layout&lt;/a&gt;. I eventually released it on GitHub and with only a single line you could integrate a beautiful transition, which is now used by almost all Google Apps.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;app-flows--interactions&quot;&gt;App Flows &amp;amp; Interactions&lt;/h2&gt;

&lt;p&gt;Below is the demo which I had recorded for pitching purposes. Writing a case study was a long shot at the moment. Please bear with the low quality gifs and videos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/inline-search.gif&quot; alt=&quot;Image&quot; class=&quot;size-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter Book Title: I wanted the user’s eye to remain on the card and used inline crossfade animation for that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/profile.gif&quot; alt=&quot;Image&quot; class=&quot;size-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Profile screen had a translate up animation, now called a bottom sheet. This was one of the components which became mainstream.&lt;/p&gt;

&lt;iframe height=&quot;640&quot; width=&quot;100%&quot; src=&quot;https://drive.google.com/file/d/1rR9CcfhelBeDcTAFN1IxustPcI6AgcGe/preview&quot; class=&quot;size-small&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Borrowing a book was easy. Just search for your book, select address and slot.&lt;/p&gt;

&lt;iframe height=&quot;640&quot; width=&quot;100%&quot; src=&quot;https://drive.google.com/file/d/1C8Qz1Gxg2FF8hyghqrPonRlSElQAx9by/preview&quot; class=&quot;size-small&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you wanted to lend a book, you’d get three books in return for renting as Ostrich Credits.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We had a running product. Ostrich ran, pretty fast, as long as it had food. They say that the Ostrich eats everything and so did we. We did corporate marketing, created and sold merchandise, travelled everyday hours in scorching heat in public transports to deliver a book, built side projects, worked out of 3 different places, organised meetups and kept our customers happy. We had over a thousand returning customers and much more readers through our corporate ventures.&lt;/p&gt;

&lt;p&gt;Apart from the customer facing app, we started a B2B model where we created digitally maintained library for an organizations. Had many companies including PayPal India as our partner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/gym.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;we-even-placed-our-books-in-a-gym-how-about-that&quot;&gt;We even placed our books in a gym. How about that!&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/bookmarks.jpg&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;who-wouldnt-love-these-cute-little-bookmarks&quot;&gt;Who wouldn’t love these cute little bookmarks?&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/event.png&quot; alt=&quot;Image&quot; class=&quot;size-small&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;ostrich-events-we-sold-books-coasters-notebooks-at-many-startup-like-paypal-redbus&quot;&gt;Ostrich events: We sold books, coasters, notebooks at many startup like PayPal, redBus.&lt;/h6&gt;

&lt;h2 id=&quot;the-outcome&quot;&gt;The Outcome&lt;/h2&gt;

&lt;p&gt;As a result of this experience, I grew a lot professionally and personally. It takes a great deal of courage to get out of your bubble and do things for the first time. I can’t even imagine how I went door to door to deliver a book, conversed with them about their experience, asked them for their suggestions, talked to a lot of authors, publishers &amp;amp; distributors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ostrich/tired.jpg&quot; alt=&quot;Image&quot; class=&quot;size-large&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;it-was-a-helluva-ride&quot;&gt;It was a helluva-ride!&lt;/h6&gt;

          
          
        
      
        </content>

        
          <summary>Ostrich Books was started to solve problems with book availability and the high cost. Books are either not available in the local store or are costly if ordered online. Getting suggestion online is even worse. If you are an avid reader, you’d not like the Amazon and Goodreads recommendation system. If you are an avid reader, you’d have a really bad time online.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>PlayStation Onboarding Concept</title>
        <id>https://www.sahildave.com/work/PlayStation-Onboarding-Concept/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/work/PlayStation-Onboarding-Concept/" />
        <published>2018-02-18T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;A concept to solve Onboarding problems like player creation and user rentention.
&lt;br /&gt;&lt;br /&gt;
The most difficult problem that a new gamer faces is choosing a player name. Another major problem is trying to find the best game to start his journey as a new player. This onboarding solves both.&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;p&gt;&lt;a href=&quot;https://www.behance.net/gallery/62128425/PlayStation-Onboarding-Concept&quot; target=&quot;_blank&quot;&gt;This was originally posted on behance.net&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/playstation/ps-1.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/playstation/ps-2.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/playstation/ps-3.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/playstation/ps-4.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/playstation/signin.gif&quot; alt=&quot;Image&quot; class=&quot;browser&quot; /&gt;
&lt;img src=&quot;/assets/images/playstation/sugg.gif&quot; alt=&quot;Image&quot; class=&quot;browser&quot; /&gt;
&lt;img src=&quot;/assets/images/playstation/bf4.gif&quot; alt=&quot;Image&quot; class=&quot;browser&quot; /&gt;&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>A concept to solve Onboarding problems like player creation and user rentention.The most difficult problem that a new gamer faces is choosing a player name. Another major problem is trying to find the best game to start his journey as a new player. This onboarding solves both.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Daily UI - Part 2</title>
        <id>https://www.sahildave.com/work/100-UI-Elements-Part-2/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/work/100-UI-Elements-Part-2/" />
        <published>2018-02-17T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;Inspired by the 100 days of UI , I challenged myself to create 100 UI elements. This is a 10 part series with 10 elements in every post.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/work/100-UI-Elements-Part-1/&quot;&gt;Checkout Part 1 here&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;11-promotional-dialog&quot;&gt;11. Promotional Dialog&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/011.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;12-email-invoice&quot;&gt;12. Email Invoice&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/012.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;13-expense-tracker&quot;&gt;13. Expense Tracker&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/013.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;14-pricing-page&quot;&gt;14. Pricing Page&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/014.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;15-recipe-app&quot;&gt;15. Recipe App&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/015.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;16-tax-calculator&quot;&gt;16. Tax Calculator&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/016.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;17-coming-soon-banner&quot;&gt;17. Coming Soon Banner&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/017.jpg&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;18-testimonial-page&quot;&gt;18. Testimonial Page&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/018.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;19-daily-ui-logo&quot;&gt;19. Daily UI Logo&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/019.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;20-search-animation&quot;&gt;20. Search Animation&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/020.gif&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Inspired by the 100 days of UI , I challenged myself to create 100 UI elements. This is a 10 part series with 10 elements in every post.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Craigslist Redesign Concept</title>
        <id>https://www.sahildave.com/work/Craigslist-Redesign-Concept/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/work/Craigslist-Redesign-Concept/" />
        <published>2018-02-02T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;This was a super fun project even with all the limitations that craigslist's information architecture had to offer. Redesigning craigslist as just another e-commerce website is not difficult; the challenge is keeping the returning user to feel at home.
&lt;br /&gt;&lt;br /&gt;In this project, I focussed on making the website friendlier. A new look is created taking advantage of the widescreens that we have today.&lt;/p&gt;
&lt;!--excerpt--&gt;
&lt;p&gt;&lt;a href=&quot;https://www.behance.net/gallery/62428879/Craigslist-Redesign-Concept&quot; target=&quot;_blank&quot;&gt;This was originally posted on behance.net&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/craigslist/cl1.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/craigslist/cl2.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/craigslist/cl3.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/craigslist/cl4.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/craigslist/cl5.png&quot; alt=&quot;Image&quot; /&gt;
&lt;img src=&quot;/assets/images/craigslist/cl6.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>This was a super fun project even with all the limitations that craigslist's information architecture had to offer. Redesigning craigslist as just another e-commerce website is not difficult; the challenge is keeping the returning user to feel at home.In this project, I focussed on making the website friendlier. A new look is created taking advantage of the widescreens that we have today.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Daily UI - Part 1</title>
        <id>https://www.sahildave.com/work/100-UI-Elements-Part-1/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/work/100-UI-Elements-Part-1/" />
        <published>2018-01-28T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;Inspired by the 100 days of UI , I challenged myself to create 100 UI elements. This is a 10 part series with 10 elements in every post.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/work/100-UI-Elements-Part-2/&quot;&gt;Checkout Part 2 here&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;1-sign-up-form&quot;&gt;1. Sign Up Form&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/001.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-product-card&quot;&gt;2. Product Card&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/002.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-landing-page&quot;&gt;3. Landing Page&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/003.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-calculator&quot;&gt;4. Calculator&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/004.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;5-imdb-profile&quot;&gt;5. IMDB Profile&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/005.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;6-kindle-settings&quot;&gt;6. Kindle Settings&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/006.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;7-music-player&quot;&gt;7. Music Player&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/007.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;8-apple-404-page&quot;&gt;8. Apple 404 Page&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/008.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;9-discard-dialog&quot;&gt;9. Discard Dialog&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/009.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;10-direct-messaging&quot;&gt;10. Direct Messaging&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/100elems/010.png&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Inspired by the 100 days of UI , I challenged myself to create 100 UI elements. This is a 10 part series with 10 elements in every post.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Sketch Plugin Gists</title>
        <id>https://www.sahildave.com/blog/Sketch-Gists-Useful-snippets-for-plugin-development/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/blog/Sketch-Gists-Useful-snippets-for-plugin-development/" />
        <published>2017-08-10T00:00:00+02:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;Last week I was developing an internal tool to create a design workflow for my workplace. The process involved creating a style guide for a new project by setting up the branding colours, typefaces, shadows and scrim. All went well until it was required to convert the text layers into symbols so as to generalise them as well.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;If you use a text layer in a symbol, you can only override only the text; not any other property including font colour or weight.
This makes the symbol not so customisable. For example, you’d have to create multiple types of alert messages instead of just one where you can change the icon and colour.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Until Sketch releases an update where you override all the properties in a text layer it would be good to convert all your text styles into text symbols and use them in your other symbols.
In this article, I would share some snippets which acted as utils in my project. I kept these methods in a utils.js file and imported it by adding an import statement on top my main script.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@import ‘utils.js’&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;finding-page-layer-or-symbol&quot;&gt;Finding page, layer or symbol&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/sahildave/9ecf7ba5e96a35f6575f9c7a073e659c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;First method is generic, where a list and a key is taken as parameters and name of every element is compared with it. If there is a match, the same item is returned. The other functions are the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;findLayerByName&lt;/code&gt; takes the artboard as the parameter and iterates over the &lt;code class=&quot;highlighter-rouge&quot;&gt;artboard.layers()&lt;/code&gt; list.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;findPageByName&lt;/code&gt; the pages parameter can be fetched from the document by using &lt;code class=&quot;highlighter-rouge&quot;&gt;doc.pages()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;findSymbolByName&lt;/code&gt; list of symbols can be obtained by, again, using the document. The &lt;code class=&quot;highlighter-rouge&quot;&gt;getSymbols(doc)&lt;/code&gt; function looks like this.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Get all the symbols for a document.
 * @param {MSDocument} doc
 * @return {NSArray}
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getSymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allSymbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;creating-artboard-page-textlayer--symbol&quot;&gt;Creating Artboard, Page, TextLayer &amp;amp; Symbol&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/sahildave/9192956b791d57e5af9f64821d5b04c6.js&quot;&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;createArtboard&lt;/code&gt; function is self explanatory. It creates a new &lt;code class=&quot;highlighter-rouge&quot;&gt;MSArtboardGroup&lt;/code&gt;, sets its name, geometry and adds it to the current page. This can be made even more generic by taking the page as a parameter.&lt;/li&gt;
  &lt;li&gt;There are two types of &lt;code class=&quot;highlighter-rouge&quot;&gt;createPage&lt;/code&gt; functions. First creates a new page and adds it to the document data. Important step is to call &lt;code class=&quot;highlighter-rouge&quot;&gt;doc.loadLayerListPanel()&lt;/code&gt; after you add the page, otherwise the page won’t appear on the left unless you collapse and expand the page list.
The second function creates a blank page and renames it, as simple as that.&lt;/li&gt;
  &lt;li&gt;Creating text layer also follows the same trend. One thing to remember is to add it to a page by &lt;code class=&quot;highlighter-rouge&quot;&gt;page.addLayers([layer]);&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Creating symbol from layer is a bit verbose. You take in a page, layer and the symbol name; add the layer to the page, convert the same layer to a new symbol, move this new symbol to the symbols page and remove the original symbol instance (which was added to the page).
If you pass false in the third parameter of the call: &lt;code class=&quot;highlighter-rouge&quot;&gt;MSSymbolCreator. createSymbolFromLayers_withName_onSymbolsPage(layers, symbolName, true);&lt;/code&gt; it would be added to the current page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;show-symbols-page-get-all-symbols-get-last-symbol&quot;&gt;Show symbols page, get all symbols, get last symbol&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/sahildave/0533d4cae6e5280d3c1e69c4ae9830d2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Frankly, only the third function &lt;code class=&quot;highlighter-rouge&quot;&gt;getBottomSymbol&lt;/code&gt; is the interesting function in this gist. It compares the position of the symbols and use the compare function to return the appropriate integer. Comments are added to help you out.&lt;/p&gt;

&lt;p&gt;I am now planning to release my workflow as a plugin. It essentially would help you out to set a theme for your project. It has inbuilt palette and typeface generator.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This post originally appeared &lt;a href=&quot;https://medium.com/sketch-app-sources/sketch-gists-useful-snippets-for-plugin-development-1-3-214a77097142&quot;&gt;here&lt;/a&gt; on Medium&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Last week I was developing an internal tool to create a design workflow for my workplace. The process involved creating a style guide for a new project by setting up the branding colours, typefaces, shadows and scrim. All went well until it was required to convert the text layers into symbols so as to generalise them as well.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Boolean Operations in Sketch</title>
        <id>https://www.sahildave.com/blog/Speed-up-Sketch-workflow-using-Boolean-Operations/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/blog/Speed-up-Sketch-workflow-using-Boolean-Operations/" />
        <published>2017-07-29T00:00:00+02:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;Boolean operations are a very powerful tool in any Product and/or Graphics design application. A complicated looking shape can be constructed in no time using the four options present in Sketch, namely Union, Subtract, Intersect and Difference.&lt;/p&gt;

&lt;p&gt;The inspiration for this article came after spending hours drooling over the icons that &lt;a href=&quot;https://twitter.com/marcedwards/status/863611285275107328&quot;&gt;Marc Edward&lt;/a&gt; made in his new Imgur album “Vector icon speed runs”. Make sure to check it out.&lt;/p&gt;

&lt;p&gt;Although, by the looks of it, he is using Adobe Illustrator and there are a few other things that Marc does in his speed run; in almost all of the flows he uses some kind of Boolean Operation.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Getting on point, there are four kinds of Boolean Operations which are available in Sketch. You can save, print and stick the images below in your design bay, compel yourself to use it when needed.&lt;/p&gt;

&lt;h1 id=&quot;1-union-operation&quot;&gt;1. Union Operation&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/boolean_union.png&quot; alt=&quot;Union&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-subtract-operation&quot;&gt;2. Subtract Operation&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/boolean_subtract.png&quot; alt=&quot;Subtract&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-intersect-operation&quot;&gt;3. Intersect Operation&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/boolean_intersect.png&quot; alt=&quot;Intersect&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-difference-operation&quot;&gt;4. Difference Operation&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/boolean_difference.png&quot; alt=&quot;Difference&quot; /&gt;&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Boolean operations are a very powerful tool in any Product and/or Graphics design application. A complicated looking shape can be constructed in no time using the four options present in Sketch, namely Union, Subtract, Intersect and Difference.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Multi-module Android library</title>
        <id>https://www.sahildave.com/blog/Releasing-multi-module-Android-library-in-gradle/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/blog/Releasing-multi-module-Android-library-in-gradle/" />
        <published>2017-01-23T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;In the last post I had discussed how we are using product flavors to release different versions of the code base with minor changes. It had helped us serve different clients with different requirements.
In this post I would share how we release multiple split libraries and have interdependencies similar to how Google releases play-services or appcompat libraries. It seems easy till the publishing day, until it is not! The problem with inter-dependency is maven does not add the version number in the pom file for local module dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/multi_library.png&quot; alt=&quot;Dependency Tree: Release Libraries are public libraries which are released using Maven.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;

&lt;p&gt;The problem arises when you try to release the super-library and its pom file includes an &lt;code class=&quot;highlighter-rouge&quot;&gt;unspecified&lt;/code&gt; version number for the core-library in the dependency node.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;lib-groupId&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lib-artifactId&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;aar&lt;span class=&quot;nt&quot;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.android.support&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;appcompat-v7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;25.1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Highlighted --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;MultiLibrary&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;core-library&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;unspecified&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Highlighted --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;highlighted-above&quot;&gt;Highlighted above:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;groupId&lt;/strong&gt; is the rootProject of the library. Here the repo name MultiLibrary.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;version&lt;/strong&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;unspecified&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the client adds it in the their dependencies list, it wont compile throwing an error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Failed to resolve: MultiLibrary.core-library:unspecified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;We can inject a function just after pom evaluation is done. We would go through each dependency added in the pom file and edit the particular dependency node if its version is &lt;code class=&quot;highlighter-rouge&quot;&gt;unspecified&lt;/code&gt;. You should check for both, &lt;code class=&quot;highlighter-rouge&quot;&gt;groupId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;version&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;uploadArchives&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenDeployer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file://${buildDir}/outputs/maven&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GROUP&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;artifactId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARTIFACT_ID&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VERSION&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;whenConfigured&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Current Dependencies ${pom.dependencies}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Processing ${dep}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;unspecified&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGroupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootProjectDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Updating Dependencies&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setGroupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GROUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Updated ${dep}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the &lt;code class=&quot;highlighter-rouge&quot;&gt;core-library&lt;/code&gt; dependency in the pom file looks like:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;lib-groupId&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;core-library&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;compile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the dependency is release ready and the client can integrate the super library. Also the sub libraries can be released as separate modules.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This post originally appear &lt;a href=&quot;https://android.jlelse.eu/releasing-multi-module-android-library-in-gradle-7286cd667b4b&quot;&gt;here&lt;/a&gt; on Medium&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>In the last post I had discussed how we are using product flavors to release different versions of the code base with minor changes. It had helped us serve different clients with different requirements.In this post I would share how we release multiple split libraries and have interdependencies similar to how Google releases play-services or appcompat libraries. It seems easy till the publishing day, until it is not! The problem with inter-dependency is maven does not add the version number in the pom file for local module dependencies.</summary>
        
      </entry>
    
  
    
      

      

      <entry>
        <title>Product Flavors for Android Library</title>
        <id>https://www.sahildave.com/blog/product-flavors-for-android-libraries/</id>
        <link rel="alternate" type="text/html" href="https://www.sahildave.com/blog/product-flavors-for-android-libraries/" />
        <published>2016-11-22T00:00:00+01:00</published>

        
          <updated>2019-05-21T17:45:02+02:00</updated>
        

        <author>
          <name>Sahil Dave</name>
          <uri>https://sahildave.xyz/</uri>
          <email>sahildave1991@gmail.com</email>
        </author>

        <content type="html" xml:base="https://www.sahildave.com/">
          
            &lt;p&gt;Product flavors is a powerful feature of the gradle plugin in Android Studio. Several developers use it to create free/paid or full/demo versions, releasing customized versions of their product.
In this post I would add product flavors to one of the libraries that I am working on. This library is an enterprise entity and different clients have different requirements with respect to &lt;code class=&quot;highlighter-rouge&quot;&gt;minSdkVersion&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;targetSdkVersion&lt;/code&gt;, support library versions and other internal dependencies.&lt;/p&gt;

&lt;h2 id=&quot;product-flavors-on-applications&quot;&gt;Product Flavors on Applications&lt;/h2&gt;

&lt;p&gt;Using product flavors on a regular applications is easy. Just add the productFlavors block and you are good to go.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyz.sahildave.flavoredlibrary.free&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;paid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyz.sahildave.flavoredlibrary.paid&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can now create sourceSets folders &lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/paid/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/free/&lt;/code&gt; parallel to &lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/main/&lt;/code&gt;. The common classes and resources can stay in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/src/main&lt;/code&gt; while the flavor dependent code can go in the respective folders. Hold on to this concept, we’d use it later.&lt;/p&gt;

&lt;h2 id=&quot;product-flavors-in-android-library&quot;&gt;Product Flavors in Android Library&lt;/h2&gt;

&lt;p&gt;Creating the product flavor in the library’s &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file is basically the same as above, the thing that changes is the dependency management in the app module. Here I create 2 flavors with different sdk versions.&lt;/p&gt;

&lt;p&gt;Please note that publishing of all variants are not enabled by default. You need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;publishNonDefault&lt;/code&gt; variable in the &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; scope. Read more about &lt;code class=&quot;highlighter-rouge&quot;&gt;publishNonDefault&lt;/code&gt; here.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;publishNonDefault&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sdk1521&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sdk1524&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For using these two product flavors in the demo app, I created two different configurations with the same SDK versions.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Other configurations and buildtypes&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app1521&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyz.sahildave.flavoredlibrary.app1521&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app1524&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyz.sahildave.flavoredlibrary.app1524&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1521DebugCompile&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1524DebugCompile&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.support:appcompat-v7:24.2.0'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1521DebugCompile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':mylibrary'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;configuration:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sdk1521Debug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1524DebugCompile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':mylibrary'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;configuration:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sdk1524Debug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have only created the debug configurations because I wanted to test the integration in the demo app and not release it on any store.&lt;/p&gt;

&lt;h2 id=&quot;potential-bugs&quot;&gt;Potential Bugs&lt;/h2&gt;

&lt;h3 id=&quot;1-mismatched-support-library-version-in-the-library-module&quot;&gt;1. Mismatched Support Library Version in the Library Module&lt;/h3&gt;

&lt;p&gt;While you are building the flavored library, you’d want to use the correct support library with the corresponding library flavor, i.e.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;publishNonDefault&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sdk1521&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sdk1524&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    compile 'com.android.support:appcompat-v7:24.2.1'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sdk1524Compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.support:appcompat-v7:24.2.1'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sdk1521Compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.support:appcompat-v7:21.0.3'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lint does not give a warning for flavored apps (tried in AS 2.1 and AS 2.2) but you can try to replicate it by creating a separate application module and setting &lt;code class=&quot;highlighter-rouge&quot;&gt;compileSdkVersion&lt;/code&gt; and support library version different. You’d see this lint warning:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This support library should not use a different version (24) than the compileSdkVersion (21):
There are some combinations of libraries, or tools and libraries, that are incompatible, or can lead to bugs. One such incompatibility is compiling with a version of the Android support libraries that is not the latest version (or in particular, a version lower than your targetSdkVersion.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-multiple-support-library-versions-in-app-module&quot;&gt;2. Multiple Support Library Versions in App Module&lt;/h3&gt;

&lt;p&gt;Now that the library variants are dependent on different versions of support library, the current dependencies system in the app module would use two versions of support library at the same time for the flavor 1521. To cope with this problem, you should make the app variants depend upon the correct support library versions as well.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Other configurations and buildtypes&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;productFlavors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app1521&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyz.sahildave.flavoredlibrary.app1521&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app1524&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyz.sahildave.flavoredlibrary.app1524&quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1521DebugCompile&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1524DebugCompile&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//    compile 'com.android.support:appcompat-v7:24.1.0'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1521DebugCompile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':mylibrary'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;configuration:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sdk1521Debug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1524DebugCompile&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':mylibrary'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;configuration:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sdk1524Debug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1521DebugCompile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.support:appcompat-v7:21.0.3'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app1524DebugCompile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.support:appcompat-v7:24.2.0'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-appcompatactivity-not-available-in-flavor-targeting-21&quot;&gt;3. AppCompatActivity not available in flavor targeting 21&lt;/h3&gt;
&lt;p&gt;Now that we have made the flavor app1521 and sdk1521 dependent on &lt;code class=&quot;highlighter-rouge&quot;&gt;support-library&lt;/code&gt; 21+, we can’t extend the good old &lt;code class=&quot;highlighter-rouge&quot;&gt;AppCompatActivity&lt;/code&gt; and have to fallback to ActionBarActivity. For this we use the flexibility of &lt;code class=&quot;highlighter-rouge&quot;&gt;sourcesSets&lt;/code&gt;. We create the parallel folders and abstract out the superclass for &lt;code class=&quot;highlighter-rouge&quot;&gt;LibraryActivity&lt;/code&gt;. This way we can have different superclass dependent upon the flavor of the library we are dealing with. The plan is to make the &lt;code class=&quot;highlighter-rouge&quot;&gt;FlavoredActivity&lt;/code&gt; extend &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionBarActivity&lt;/code&gt; in sdk1521 and &lt;code class=&quot;highlighter-rouge&quot;&gt;AppCompatActivity&lt;/code&gt; in sdk1524:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library
    |
    |--src
    |    |--main
    |    |    |--java
    |    |    |    |--xyz.sahildave.mylibrary
    |    |    |    |    |--LibraryActivity.java
    |    |
    |    |--sdk1521
    |    |    |--java
    |    |    |    |--xyz.sahildave.mylibrary
    |    |    |    |    |--FlavoredActivity.java
    |    |
    |    |--sdk1524
    |    |    |--java
    |    |    |    |--xyz.sahildave.mylibrary
    |    |    |    |    |--FlavoredActivity.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Flavor:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdk1521&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlavoredActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionBarActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateLibraryText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Flavor:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdk1524&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlavoredActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateLibraryText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now that we have abstracted out the &lt;code class=&quot;highlighter-rouge&quot;&gt;FlavoredActivity&lt;/code&gt;, we can extend it in our main &lt;code class=&quot;highlighter-rouge&quot;&gt;LibraryActivity&lt;/code&gt;. The same thing can be done for other flavor dependent entities.&lt;/p&gt;

&lt;p&gt;You can see all of this running in action at this project repo. https://github.com/sahildave/Flavored-Library&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This post was originally seen &lt;a href=&quot;https://android.jlelse.eu/product-flavors-for-android-library-d3b2d240fca2&quot;&gt;here&lt;/a&gt; on Medium.&lt;/p&gt;

          
          
        
      
        </content>

        
          <summary>Product flavors is a powerful feature of the gradle plugin in Android Studio. Several developers use it to create free/paid or full/demo versions, releasing customized versions of their product.In this post I would add product flavors to one of the libraries that I am working on. This library is an enterprise entity and different clients have different requirements with respect to minSdkVersion, targetSdkVersion, support library versions and other internal dependencies.</summary>
        
      </entry>
    
  
</feed>
